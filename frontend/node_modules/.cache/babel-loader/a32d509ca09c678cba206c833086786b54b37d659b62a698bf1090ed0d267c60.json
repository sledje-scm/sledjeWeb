{"ast":null,"code":"var _jsxFileName = \"/Users/nishant/Desktop/sledgeNew/sledjeWeb/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null); // Store user data\n  const [error, setError] = useState(null); // Store login errors\n  const navigate = useNavigate();\n  const login = async credentials => {\n    try {\n      // Simulate API call or integrate your login API logic here\n      const {\n        username,\n        password\n      } = credentials;\n\n      // Example: Replace this with your actual API call\n      if (username === \"testuser\" && password === \"password123\") {\n        setUser({\n          name: \"Test User\",\n          username\n        });\n        setIsLoggedIn(true);\n        setError(null);\n        console.log(\"Logged in successfully!\");\n        navigate(\"/\"); // Redirect to the home page after login\n      } else {\n        throw new Error(\"Invalid username or password\");\n      }\n    } catch (err) {\n      setError(err.message || \"Login failed\");\n      console.error(\"Login error:\", err);\n    }\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(null);\n    console.log(\"Logged out!\");\n    navigate(\"/login\"); // Redirect to the login page after logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      user,\n      login,\n      logout,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"1j1b5IwJgyCu9237pQlRgTz5z+E=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","user","setUser","error","setError","navigate","login","credentials","username","password","name","console","log","Error","err","message","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/nishant/Desktop/sledgeNew/sledjeWeb/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null); // Store user data\n  const [error, setError] = useState(null); // Store login errors\n  const navigate = useNavigate();\n\n  const login = async (credentials) => {\n    try {\n      // Simulate API call or integrate your login API logic here\n      const { username, password } = credentials;\n\n      // Example: Replace this with your actual API call\n      if (username === \"testuser\" && password === \"password123\") {\n        setUser({ name: \"Test User\", username });\n        setIsLoggedIn(true);\n        setError(null);\n        console.log(\"Logged in successfully!\");\n        navigate(\"/\"); // Redirect to the home page after login\n      } else {\n        throw new Error(\"Invalid username or password\");\n      }\n    } catch (err) {\n      setError(err.message || \"Login failed\");\n      console.error(\"Login error:\", err);\n    }\n  };\n\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(null);\n    console.log(\"Logged out!\");\n    navigate(\"/login\"); // Redirect to the login page after logout\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, user, login, logout, error }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAMc,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9B,MAAMc,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACF;MACA,MAAM;QAAEC,QAAQ;QAAEC;MAAS,CAAC,GAAGF,WAAW;;MAE1C;MACA,IAAIC,QAAQ,KAAK,UAAU,IAAIC,QAAQ,KAAK,aAAa,EAAE;QACzDP,OAAO,CAAC;UAAEQ,IAAI,EAAE,WAAW;UAAEF;QAAS,CAAC,CAAC;QACxCR,aAAa,CAAC,IAAI,CAAC;QACnBI,QAAQ,CAAC,IAAI,CAAC;QACdO,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtCP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACL,MAAM,IAAIQ,KAAK,CAAC,8BAA8B,CAAC;MACjD;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZV,QAAQ,CAACU,GAAG,CAACC,OAAO,IAAI,cAAc,CAAC;MACvCJ,OAAO,CAACR,KAAK,CAAC,cAAc,EAAEW,GAAG,CAAC;IACpC;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBhB,aAAa,CAAC,KAAK,CAAC;IACpBE,OAAO,CAAC,IAAI,CAAC;IACbS,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BP,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,UAAU;MAAEE,IAAI;MAAEK,KAAK;MAAEU,MAAM;MAAEb;IAAM,CAAE;IAAAN,QAAA,EACrEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CAvCWF,YAAY;EAAA,QAINJ,WAAW;AAAA;AAAA+B,EAAA,GAJjB3B,YAAY;AAyCzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnC,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC8B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}